/*
 * simple rpc system scaffolding
 *
 * 4/2/99, -bsy
 */

#include <stdarg.h>

#include <inttypes.h>
/* network types */

/* rpc scaffolding data structures */

#define	MAX_RPC_SIZE		(1024)

struct srss_state;	/* fwd */

struct srss_entry {
	char			*rpc_name;	/* debugging use only */
	void			(*rpc_handler)(struct srss_state *);
	/*
	 * use NULL handler for deprecated interface; this means RPC numbering
	 * can't be too sparse.
	 */
};

struct srss_state {
	int			sock;
	int			num_entries;
	struct srss_entry	*entry_pts;
	int			in_ix, out_ix;
	char			in_buf[MAX_RPC_SIZE], out_buf[MAX_RPC_SIZE];
	void			(*fn)(struct srss_entry *);
};

#define	SRSS_BAD_READ		(-1)
#define	SRSS_BAD_WRITE		(-2)
#define	SRSS_BAD_RPC_ENTRY	(-3)
#define	SRSS_BAD_RPC_SIZE	(-4)

void srss_rewind_request(struct srss_state	*sp);
void srss_rewind_reply(struct srss_state	*sp);
uint32_t srss_get_uint32(struct srss_state	*sp);
void srss_set_uint32(struct srss_state	*sp,
		     uint32_t		v);
uint16_t srss_get_uint16(struct srss_state	*sp);
void srss_set_uint16(struct srss_state	*sp,
		     uint16_t		v);
char *srss_get_str(struct srss_state	*sp);
void srss_set_str(struct srss_state	*sp,
		  char			*s);
double srss_get_double(struct srss_state	*sp);
void srss_set_double(struct srss_state	*sp,
		     double		v);
int	srss_unmarshall(struct srss_state	*sp,
			char			*fmt,
			...);
int	srss_marshall(struct srss_state	*sp,
		      char		*fmt,
		      ...);
void srss_server_init(struct srss_state	*state,
		      int		nentries,
		      struct srss_entry	*entry_pts,
		      int		sock);
void srss_client_init(struct srss_state	*state,
		      int		sock);
int srss_service(struct srss_state	*state,
		 int			ignore_errs);
int srss_rpc(struct srss_state	*sp,
	     int		rpc_num);
